; Widgets
(defwidget sidestuff_left []
    (box :class "sidestuff"
         :orientation "h"
         :space-evenly false
         :halign "center"
         :valign "start"
         :width 327
        ; (power-menu)
        ; (keyboard-layout)
        ; (window-title)
        (ws-layout)))

(defwidget sidestuff_right []
    (box :class "sidestuff"
         :orientation "h"
         :space-evenly false
         :halign "center"
        (metric :label "󰐿"
                :label-class "icon-small"
                :value '${EWW_RAM.used_mem_perc}'
                :tooltip  '${EWW_RAM.used_mem_perc}'
                :onchange "")
        (metric :label ""
                :label-class "icon-small"
                :value {wifi-signal != "" ? wifi-signal : "0.0"}
                :tooltip "${wifi-signal != "" ? wifi-signal : "0.0"}"
                :onchange "")
        (metric :label '${audio-icon}'
                :label-class {audio-icon == "󰋋"
                           || audio-icon == "󰟎"
                           || audio-icon == "󰋎"
                           || audio-icon == "󰋐"
                           || audio-icon == "󰽟"
                           || audio-icon == "󰽠"
                            ? "icon-small" : "icon-smaller"}
                :value volume
                :tooltip volume
                :onchange  "pactl set-sink-volume @DEFAULT_SINK@ {}%")
        (metric :label {EWW_BATTERY["BAT0"].status == "Discharging" ? "󰄌" : "󰚥"}
                :label-class {EWW_BATTERY["BAT0"].status == "Discharging" ? "icon-bat"  : "icon-smaller"}
                :value  '${EWW_BATTERY["BAT0"].capacity}'
                :tooltip '${EWW_BATTERY["BAT0"].capacity}'
                :onchange "")
        (time)))

(defwidget metric [label label-class value tooltip onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
       :tooltip tooltip
    (box :class label-class label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget tags [ws-id]
    (box :class "workspaces"
         :orientation "h"
         :space-evenly true
         :halign "center"
      (box
        (for tag in '${wmstate.workspaces[ws-id].tags}'
          (button
            :class {tag.mine ? "ws-button-mine" :
                    tag.visible ? "ws-button-visible" :
                    tag.urgent ? "ws-button-urgent" :
                    tag.busy ? "ws-button-busy" : "ws-button"}
            :onclick "leftwm-command \"SendWorkspaceToTag ${ws-id} ${tag.index}\""
            {!tag.mine && !tag.busy && !tag.visible && !tag.urgent ?  "·" : "${tag.name}"})))))
             
(defwidget keyboard-layout []
    (box :class "icon-key"
         :orientation "h"
         :space-evenly false
         :halign "start"
        {kbd-layout != "" ? kbd-layout : ""}))

(defwidget ws-layout []
    (box :class "ws-layout"
         :space-evenly false
         :halign "start" 
         :valign "start"
         :width 220
        (box :class "icon-ws-layout" "󰧨")
        ; (box {replace(wmstate.workspaces[0].layout, '([A-Z])([a-z])*', '${2} ') ?: "n/a"})))
        (box {wmstate.workspaces[0].layout ?: "n/a"})))

(defwidget window-title []
    (box :class "ws-layout"
         :space-evenly false
         :halign "start" 
         :valign "start"
         :width 220
        (box :class "icon-ws-layout" "类")
        (label
         :limit-width 10
         :show-truncated true
         :text "${wmstate.window_title ?: 'Desktop'}")))

(defwidget time []
    (box :class "time"
        (button :onclick "eww open --toggle uhr" :class "icon-time" "󰥔")
        {time}))
; (defwidget time []
;       (box :class "time"
;         ; :tooltip formattime(EWW_TIME, "Europe/Berlin", "%Y/%m/%d")
;         (button :onclick "eww open --toggle uhr" :class "icon-time" "")
;         formattime(EWW_TIME, "Europe/Berlin", "%H:%M")))

(defwidget uhr []
    (box :class "uhr"
        {uhrwerk}))

(defwidget lock []
    (box :class "lock"
        {uhrwerk}))

(defwidget systemtray []
    (systray :pack-direction "ltr"))

; Variables
(defvar pwmen-open false)
; sliders
(deflisten audio-icon "scripts/getpa")
(defpoll volume :initial "50" :interval "16s" "scripts/getvol")
(defpoll wifi-signal :initial "0" :interval "10s" "scripts/getwifi")
(defpoll ssid :interval "10s" "nmcli -f IN-USE,SSID device wifi | awk '/^\*/{if (NR!=1) {print $2}}'")
; Time
; (deflisten time "$HOME/.cargo/bin/uhrwerk -d")
(deflisten time "uhrwerk -d")
; (deflisten uhrwerk "$HOME/.cargo/bin/uhrwerk -t $HOME/Git/uhrwerk/time-in-words-templates/de_1.ron")
(deflisten uhrwerk "uhrwerk -t $HOME/Git/uhrwerk/time-in-words-templates/de_1.ron")
; WM and Keyboard state
(deflisten kbd-layout "scripts/get-kbd-layout")
(deflisten wmstate 
           :initial '{"workspaces":[{"layout":"", "tags":[{"name":"", "index":0, "mine":false, "busy":false, "visible":false, "urgent":false }] }]}'
           "leftwm-state")

; Windows
(defwindow left
           :monitor 0
           :windowtype "dock"
           :geometry (geometry :x "21px"
                               :y "10px"
                               :anchor "top left")
           :reserve (struts :side "top" :distance "55px")
    (sidestuff_left))

(defwindow tags
           :monitor 0
           :windowtype "dock"
           :geometry (geometry :x "0px"
                               :y "10px"
                               :anchor "top center")
           :reserve (struts :side "top" :distance "55px")
    (tags :ws-id 0))

(defwindow right
           :monitor 0
           :windowtype "dock"
           :geometry (geometry :x "-21px"
                               :y "10px"
                               :anchor "top right")
           :reserve (struts :side "top" :distance "55px")
    (sidestuff_right))

(defwindow tray
           :monitor 0
           :windowtype "dialog"
           :wm-ignore true
           :focusable true
           :geometry (geometry :x "348px"
                               :y "10px"
                               :width "327px"
                               ; :height "34px"
                               :height "34px" ; this is a workaround, as gtk is expanding the height to this anyways
                               :anchor "top left")
           :reserve (struts :side "top" :distance "55px")
    (systemtray)) 

(defwindow uhr
           :monitor 0
           :windowtype "dialog"
           :wm-ignore true
           :geometry (geometry :x "89px"
                               :y "-89px"
                               :width "600px"
                               :height "55"
                               :anchor "bottom left")
    (uhr))

(defwindow lock
           :monitor 0
           :windowtype "desktop"
           :stacking "fg"
           :wm-ignore true
           :geometry (geometry :x "0"
                               :y "0"
                               :width "100%"
                               :height "100%"
                               :anchor "top left")
    (lock))
